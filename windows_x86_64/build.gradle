
apply plugin: 'cpp'

if(hasProperty('SFML2_DIR') && hasProperty('EXTLIBS_DIR'))
{
    model {
        repositories {
            lib(PrebuiltLibraries) {
                if(project.hasProperty('GTEST_DIR')) {
                    gtest {
                        headers.srcDir "${GTEST_DIR}/include"
                        binaries.withType(SharedLibraryBinary) {
                            sharedLibraryFile = file("${GTEST_DIR}/lib/libgtest.so")
                        }
                        binaries.withType(StaticLibraryBinary) {
                            staticLibraryFile = file("${GTEST_DIR}/lib/libgtest.a")
                        }
                    }
                }
            }
        }

        buildTypes {
            debug
            release
        }

        platforms {
            windows_x86_64 {
                operatingSystem "windows"
                architecture "x86_64"
            }
        }

        toolChains {
            mingw_x86_64(Gcc) {
                path "/usr/bin"
                eachPlatform() {
                    cCompiler.executable "x86_64-w64-mingw32-gcc"
                    cppCompiler.executable "x86_64-w64-mingw32-g++"
                    linker.executable "x86_64-w64-mingw32-g++"
                    assembler.executable "x86_64-w64-mingw32-as"
                    staticLibArchiver.executable "x86_64-w64-mingw32-ar"
                }
                target("windows_x86_64")
            }
        }
    }

    executables {
        game_project {
            targetPlatforms "windows_x86_64"

            binaries.all {
                cppCompiler.args "-std=c++11", "-Wall", "-Wextra"

                if(project.hasProperty('ResourcePacker_DIR')) {
                    cppCompiler.define "ResourcePacker_FOUND"
                }

                if(buildType == buildTypes.debug) {
                    cppCompiler.args "-O0", "-g"
                }
                if(buildType == buildTypes.release) {
                    cppCompiler.define "NDEBUG"
                    cppCompiler.args "-O3"
                }
            }
        }

        if(project.hasProperty('GTEST_DIR'))
        {
            unit_tests {
                targetPlatforms "windows_x86_64"

                binaries.all {
                    cppCompiler.args "-std=c++11", "-Wall", "-Wextra"

                    if(project.hasProperty('ResourcePacker_DIR')) {
                        cppCompiler.define "ResourcePacker_FOUND"
                    }

                    if(buildType == buildTypes.debug) {
                        cppCompiler.args "-O0", "-g"
                    }
                    if(buildType == buildTypes.release) {
                        cppCompiler.define "NDEBUG"
                        cppCompiler.args "-O3"
                    }
                }
            }
        }
    }

    sources {
        game_project {
            cpp {
                if(project.hasProperty('ResourcePacker_DIR')) {
                    lib project: ":RP_windows_x86_64", library: "ResourcePacker"
                }
                lib project: ":sfml_windows_x86_64", library: "sfml_system"
                lib project: ":sfml_windows_x86_64", library: "sfml_window"
                lib project: ":sfml_windows_x86_64", library: "sfml_network"
                lib project: ":sfml_windows_x86_64", library: "sfml_graphics"
                lib project: ":sfml_windows_x86_64", library: "sfml_audio"
                source {
                    srcDir "${rootDir}/src"
                    include "**/*.cpp"
                }
                exportedHeaders {
                    srcDir "${rootDir}/src"
                    srcDir "${SFML2_DIR}/src/SFML2/headers"
                }
            }
        }

        if(project.hasProperty('GTEST_DIR'))
        {
            unit_tests {
                cpp {
                    if(project.hasProperty('ResourcePacker_DIR')) {
                        lib project: ":RP_windows_x86_64", library: "ResourcePacker"
                    }
                    lib project: ":sfml_windows_x86_64", library: "sfml_system"
                    lib project: ":sfml_windows_x86_64", library: "sfml_window"
                    lib project: ":sfml_windows_x86_64", library: "sfml_network"
                    lib project: ":sfml_windows_x86_64", library: "sfml_graphics"
                    lib project: ":sfml_windows_x86_64", library: "sfml_audio"
                    lib library: "gtest"
                    source {
                        srcDir "${rootDir}"
                        include "src/**/*.cpp"
                        exclude "src/main.cpp"
                        include "UnitTests/**/*.cpp"
                    }
                    exportedHeaders {
                        srcDir "${rootDir}/src"
                        srcDir "${SFML2_DIR}/src/SFML2/headers"
                    }
                }
            }
        }
    }
}

